import os

# Define cURL flags and descriptions
curl_flags = {
    "Basic Usage": {
        "-#": "Display progress as a simple bar",
        "-d": "Send specified data in a POST request",
        "-F": "Specify multipart form data",
        "-I": "Fetch the headers only",
        "-X": "Specify custom HTTP request method",
        "-G": "Send the data as a GET request",
        "-L": "Follow HTTP redirects",
        "-o": "Write output to file",
        "-O": "Save file using remote name",
        "-s": "Suppress progress meter and error messages (silent mode)",
    },
    "Authentication": {
        "-u": "Set HTTP basic auth credentials",
        "--proxy-user": "Set proxy authentication credentials",
        "--anyauth": "Use any available authentication",
        "--basic": "Use HTTP Basic authentication",
        "--digest": "Use HTTP Digest authentication",
        "--ntlm": "Use NTLM authentication",
        "--negotiate": "Use GSS-Negotiate authentication",
        "--oauth2-bearer": "Use OAuth 2 Bearer token",
    },
    "Headers and Cookies": {
        "-H": "Add custom HTTP headers",
        "-b": "Send cookies from a file or as a string",
        "-c": "Write cookies to a file",
    },
    "Connection": {
        "--connect-timeout": "Maximum time to wait for a connection",
        "--keepalive-time": "Interval for sending keepalive probes",
        "--limit-rate": "Limit data transfer speed",
        "--retry": "Retry on transient errors",
        "--retry-delay": "Delay between retries",
        "--retry-max-time": "Maximum time for retries",
    },
    "SSL/TLS": {
        "-k": "Allow insecure connections",
        "--cacert": "Provide CA certificate file",
        "--cert": "Use client certificate",
        "--key": "Use client private key",
        "--ssl": "Force SSL/TLS usage",
        "--tlsv1.2": "Use specific TLS version",
        "--ciphers": "Specify SSL ciphers to use",
    },
    "Proxy": {
        "-x": "Use a proxy",
        "--proxy-header": "Add custom headers for the proxy",
        "--proxy-digest": "Use Digest authentication with proxy",
        "--proxy-basic": "Use Basic authentication with proxy",
    },
    "Output": {
        "--stderr": "Redirect error messages to a file",
        "--trace": "Write full trace of communication",
        "--trace-ascii": "Trace communication as ASCII",
    },
    "HTTP": {
        "--http1.1": "Use HTTP version 1.1",
        "--http2": "Use HTTP version 2",
        "--http3": "Use HTTP version 3",
    },
    "Data and Upload": {
        "--data-urlencode": "URL encode the POST data",
        "--form-string": "Specify form data without filename",
    },
    "FTP/FTPS": {
        "--ftp-method": "Specify FTP method to use",
        "--ftp-create-dirs": "Create missing directories",
        "--ftp-ssl": "Use SSL/TLS for FTP",
        "--ftp-account": "Specify FTP account data",
    },
    "Debugging": {
        "-v": "Provide verbose output",
        "--trace-time": "Add timestamps to trace/verbose output",
        "--libcurl": "Write equivalent libcurl code to file",
    },
    "File Transfer": {
        "-T": "Upload a file",
        "-z": "Only transfer files modified after time",
        "-C": "Resume file transfer from a specific offset",
    },
    "Miscellaneous": {
        "--compressed": "Request compressed response",
        "-Z": "Perform requests in parallel",
        "--config": "Use configuration file",
        "-": "Read from stdin",
    },
}

def display_flags():
    """Display all available cURL flags grouped by category."""
    for category, flags in curl_flags.items():
        print(f"\n{category}:")
        print("-" * len(category))
        for flag, description in flags.items():
            print(f"  {flag}: {description}")

def build_curl_command():
    """Interactively build a cURL command using selected flags."""
    print("\nLet's build a cURL command step by step. Choose flags from the list below:")
    display_flags()

    selected_flags = []
    while True:
        flag = input("\nEnter a cURL flag (or 'done' to finish): ").strip()
        if flag.lower() == "done":
            break
        selected_flags.append(flag)

    url = input("\nEnter the URL: ").strip()
    command = f"curl {' '.join(selected_flags)} {url}"
    print(f"\nGenerated cURL command: {command}")

    # Ask if the user wants to execute the command
    execute = input("\nDo you want to execute this command? (yes/no): ").strip().lower()
    if execute == "yes":
        os.system(command)

if __name__ == "__main__":
    print("Welcome to the cURL Flag Explorer!")
    while True:
        print("\nOptions:")
        print("1. View all cURL flags")
        print("2. Build a cURL command")
        print("3. Exit")

        choice = input("Choose an option (1/2/3): ").strip()
        if choice == "1":
            display_flags()
        elif choice == "2":
            build_curl_command()
        elif choice == "3":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")
